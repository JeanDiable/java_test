**********静态变量**********
大家都知道，我们可以基于一个类创建多个该类的对象，每个对象都拥有自己的成员，互相独立。然而在某些时候，我们更希望该类所有的对象共享同一个成员。此时就是 static 大显身手的时候了！！

Java 中被 static 修饰的成员称为静态成员或类成员。它属于整个类所有，而不是某个对象所有，即被类的所有对象所共享。静态成员可以使用类名直接访问，也可以使用对象名进行访问。当然，鉴于他作用的特殊性更推荐用类名访问~~

使用 static 可以修饰变量、方法和代码块。

static的作用就是定义一个共有的东西，通过任何一个对象或者类对齐进行改变，都会改变其在其他对象中访问的值。

**********静态方法**********
与静态变量一样，我们也可以使用 static 修饰方法，称为静态方法或类方法。其实之前我们一直写的 main 方法就是静态方法。静态方法的使用如：
public class HelloWorld{
    //使用static关键字声明静态方法
    public static void print(){
        System.out.println(1111);
    }
    public static void main(String[] args){
        //使用类名调用静态方法
        HelloWorld.print();
        //使用对象名调用静态方法
        HelloWorld demo = new HelloWorld();
        demo.print();
    }
}


需要注意：

1、 静态方法中可以直接调用同类中的静态成员，但不能直接调用非静态成员。如：
public class HelloWorld{
    String name = '123';
    static String hobby = 'java';

    public static void print(){
        System.out.println(name); //不能直接调用非静态变量
        System.out.println(hobby); //可以直接调用非静态变量
    }

}
如果希望在静态方法中调用非静态变量，可以通过创建类的对象，然后通过对象来访问非静态变量。如：
public static void print(){
    HelloWorld hello = new HelloWorld();
    System.out.println(hello.name); //可以通过对象调用非静态变量
    System.out.println(hobby); //可以直接调用非静态变量
}
2、 在普通成员方法中，则可以直接访问同类的非静态变量和静态变量，如下所示：
    String name = '123';
    static String hobby = 'java';

    public void print(){
        System.out.println(name); //可以直接调用非静态变量
        System.out.println(hobby); //可以直接调用非静态变量
    }

3、 静态方法中不能直接调用非静态方法，需要通过对象来访问非静态方法。如：
//普通成员方法
public void show(){
    System.out.println(1234);
}
//静态方法
public static void print(){
    System.out.println(5678);
}

public static void main(String[] args){
    //普通成员方法必须通过对象来调用
    HelloWorld hello = new HelloWorld();
    hello.show();
    //可以直接调用静态方法
    print();
}
